# Before running the program make sure you have the Tkinter library (usually included with Python) and SQLite library

import tkinter as tk 
from tkinter import messagebox
import sqlite3

class AddressBook:
def __init__(self, root):
self.root = root
self.root.title("Address Book")

# Initialize SQLite database
self.conn = sqlite3.connect("address_book.db")
self.c = self.conn.cursor()
self.create_table()

# Create GUI elements
self.create_widgets()

def create_table(self):
self.c.execute("""
CREATE TABLE IF NOT EXISTS addresses (
id INTEGER PRIMARY KEY,
first_name TEXT,
last_name TEXT,
address TEXT,
city TEXT,
state TEXT,
zipcode TEXT
)
""")
self.conn.commit()

def create_widgets(self):
# Labels
self.first_name_label = tk.Label(self.root, text="First Name")
self.first_name_label.grid(row=0, column=0)
self.last_name_label = tk.Label(self.root, text="Last Name")
self.last_name_label.grid(row=1, column=0)
self.address_label = tk.Label(self.root, text="Address")
self.address_label.grid(row=2, column=0)
self.city_label = tk.Label(self.root, text="City")
self.city_label.grid(row=3, column=0)
self.state_label = tk.Label(self.root, text="State")
self.state_label.grid(row=4, column=0)
self.zipcode_label = tk.Label(self.root, text="Zipcode")
self.zipcode_label.grid(row=5, column=0)

# Entry fields
self.first_name_entry = tk.Entry(self.root)
self.first_name_entry.grid(row=0, column=1)
self.last_name_entry = tk.Entry(self.root)
self.last_name_entry.grid(row=1, column=1)
self.address_entry = tk.Entry(self.root)
self.address_entry.grid(row=2, column=1)
self.city_entry = tk.Entry(self.root)
self.city_entry.grid(row=3, column=1)
self.state_entry = tk.Entry(self.root)
self.state_entry.grid(row=4, column=1)
self.zipcode_entry = tk.Entry(self.root)
self.zipcode_entry.grid(row=5, column=1)

# Listbox to display addresses
self.address_listbox = tk.Listbox(self.root, height=10, width=50)
self.address_listbox.grid(row=6, column=0, columnspan=3, rowspan=6)

# Scrollbar for listbox
self.scrollbar = tk.Scrollbar(self.root)
self.scrollbar.grid(row=6, column=3)
self.address_listbox.config(yscrollcommand=self.scrollbar.set)
self.scrollbar.config(command=self.address_listbox.yview)

# Buttons
self.add_button = tk.Button(self.root, text="Add", command=self.add_address)
self.add_button.grid(row=7, column=1)
self.update_button = tk.Button(self.root, text="Update", command=self.update_address)
self.update_button.grid(row=8, column=1)
self.delete_button = tk.Button(self.root, text="Delete", command=self.delete_address)
self.delete_button.grid(row=9, column=1)
self.clear_button = tk.Button(self.root, text="Clear", command=self.clear_entries)
self.clear_button.grid(row=10, column=1)

# Bind double-click event to listbox
self.address_listbox.bind("<Double-Button-1>", self.select_address)

# Populate listbox with initial data
self.populate_listbox()

def add_address(self):
first_name = self.first_name_entry.get()
last_name = self.last_name_entry.get()
address = self.address_entry.get()
city = self.city_entry.get()
state = self.state_entry.get()
zipcode = self.zipcode_entry.get()

if not first_name or not last_name or not address or not city or not state or not zipcode:
messagebox.showerror("Missing Information", "Please fill in all fields")
return

self.c.execute("INSERT INTO addresses VALUES (NULL, ?, ?, ?, ?, ?, ?)",
(first_name, last_name, address, city, state, zipcode))
self.conn.commit()
self.clear_entries()
self.populate_listbox()
messagebox.showinfo("Success", "Address added successfully")

def update_address(self):
selected_address = self.address_listbox.get(self.address_listbox.curselection())
address_id = selected_address.split('.')[0]

first_name = self.first_name_entry.get()
last_name = self.last_name_entry.get()
address = self.address_entry.get()
city = self.city_entry.get()
state = self.state_entry.get()
zipcode = self.zipcode_entry.get()

if not first_name or not last_name or not address or not city or not state or not zipcode:
messagebox.showerror("Missing Information", "Please fill in all fields")
return

elf.c.execute("UPDATE addresses SET first_name=?, last_name=?, address=?, city=?, state=?, zipcode=? WHERE id=?",
(first_name, last_name, address, city, state, zipcode, address_id))
self.conn.commit()
self.clear_entries()
self.populate_listbox()
messagebox.showinfo("Success", "Address updated successfully")

def delete_address(self):
selected_address = self.address_listbox.get(self.address_listbox.curselection())
address_id = selected_address.split('.')[0]

confirmation = messagebox.askyesno("Delete Confirmation", "Are you sure you want to delete this address?")
if confirmation:
self.c.execute("DELETE FROM addresses WHERE id=?", (address_id,))
self.conn.commit()
self.clear_entries()
self.populate_listbox()
messagebox.showinfo("Success", "Address deleted successfully")

def clear_entries(self):
self.first_name_entry.delete(0, tk.END)
self.last_name_entry.delete(0, tk.END)
self.address_entry.delete(0, tk.END)
self.city_entry.delete(0, tk.END)
self.state_entry.delete(0, tk.END)
self.zipcode_entry.delete(0, tk.END)

def populate_listbox(self):
self.address_listbox.delete(0, tk.END)
self.c.execute("SELECT * FROM addresses")
rows = self.c.fetchall()
for row in rows:
self.address_listbox.insert(tk.END, f"{row[0]}. {row[1]} {row[2]}")

def select_address(self, event):
selected_address = self.address_listbox.get(self.address_listbox.curselection())
address_id = selected_address.split('.')[0]
self.c.execute("SELECT * FROM addresses WHERE id=?", (address_id,))

#  program created by arpitbatra01 (PR3)
